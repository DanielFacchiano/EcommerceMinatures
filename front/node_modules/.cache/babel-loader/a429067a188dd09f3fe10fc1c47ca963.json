{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/reactpract/front/src/components/Store.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport Navbar from \"./Navbar\";\nimport Cart from \"./Cart\";\nimport axios from 'axios';\nimport ItemContainer from \"./ItemContainer\";\n/*\n    Sidebar react/bootstrap implementation adapted from basic html/boostrap implementation explained at:\n    https://www.broculos.net/2015/08/how-to-build-collapsible-sidebars-with.html Credit: Nuno Freitas\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Store = _ref => {\n  _s();\n\n  let {\n    toggleCart,\n    setToggleCart\n  } = _ref;\n  const [itemsList, setItemsList] = useState([]);\n\n  const axios = require('axios');\n\n  const foo = async () => {}; // Set the initial item list, get it from our backend DB\n\n\n  if (itemsList.length === 0) {\n    var URL = \"http://localhost:3005/shopping\";\n  } // events for buttons go here\n  // So we need to put our list of initial list of items here and pass it to the item container and\n  // the navbar component. The navbar can change the list when a query string is subbmitted\n  // on detection of a change in the list of items, we reload he item container component with\n  // the proper list of items in it.\n  // 1. Get initial list of items here\n  // 2. pass that list as prop to item container, build the item cards with it in item container\n  // 3. build navbar post function to reset the list of items array in store component, on\n  //    change set it to reload the item container (it might do this auto because react)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setToggleCart: setToggleCart,\n      toggleCart: toggleCart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      id: \"main-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${toggleCart ? \"col-md-9\" : \"col-md-12\"}`,\n        id: \"card-holder\",\n        children: /*#__PURE__*/_jsxDEV(ItemContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${toggleCart ? \"col-md-3\" : \"col-md-3 collapsed\"}`,\n        id: \"cart-container\",\n        children: /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Store, \"fNeMxS/dM4O/qLamWXjW574O9jQ=\");\n\n_c = Store;\nexport default Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/home/dan/Documents/reactpract/front/src/components/Store.jsx"],"names":["React","useState","Cookies","Navbar","Cart","axios","ItemContainer","Store","toggleCart","setToggleCart","itemsList","setItemsList","require","foo","length","URL"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAK,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAkC;AAC/C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;;AACA,QAAMI,KAAK,GAAGO,OAAO,CAAC,OAAD,CAArB;;AAEA,QAAMC,GAAG,GAAG,YAAY,CACvB,CADD,CAJ+C,CAO/C;;;AACA,MAAIH,SAAS,CAACI,MAAV,KAAqB,CAAzB,EACA;AAEE,QAAIC,GAAG,GAAE,gCAAT;AAGD,GAd8C,CAgB7C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,MAAD;AACA,MAAA,aAAa,EAAEN,aADf;AAEA,MAAA,UAAU,EAAED;AAFZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,EAAE,EAAC,UAAxB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAG,GAAEA,UAAU,GAAG,UAAH,GAAgB,WAAY,EAAzD;AAA4D,QAAA,EAAE,EAAC,aAA/D;AAAA,+BACA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAG,GAAEA,UAAU,GAAG,UAAH,GAAgB,oBAAqB,EAAlE;AAAqE,QAAA,EAAE,EAAC,gBAAxE;AAAA,+BACA,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA5CD;;GAAMD,K;;KAAAA,K;AA8CN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport Navbar from \"./Navbar\";\nimport Cart from \"./Cart\";\nimport axios from 'axios'\nimport ItemContainer from \"./ItemContainer\";\n\n/*\n    Sidebar react/bootstrap implementation adapted from basic html/boostrap implementation explained at:\n    https://www.broculos.net/2015/08/how-to-build-collapsible-sidebars-with.html Credit: Nuno Freitas\n\n*/\n\nconst Store = ({ toggleCart, setToggleCart }) => {\n  const [itemsList, setItemsList] = useState([]);\n  const axios = require('axios')\n  \n  const foo = async () => {\n  }\n\n  // Set the initial item list, get it from our backend DB\n  if (itemsList.length === 0)\n  {\n\n    var URL =\"http://localhost:3005/shopping\";\n\n    \n  }\n\n    // events for buttons go here\n    // So we need to put our list of initial list of items here and pass it to the item container and\n    // the navbar component. The navbar can change the list when a query string is subbmitted\n    // on detection of a change in the list of items, we reload he item container component with\n    // the proper list of items in it.\n\n    // 1. Get initial list of items here\n    // 2. pass that list as prop to item container, build the item cards with it in item container\n    // 3. build navbar post function to reset the list of items array in store component, on\n    //    change set it to reload the item container (it might do this auto because react)\n    \n  return (\n    <div className=\"container\">\n        <Navbar \n        setToggleCart={setToggleCart}\n        toggleCart={toggleCart}\n        />\n        <div className=\"row\" id=\"main-row\">\n            <div className={`${toggleCart ? \"col-md-9\" : \"col-md-12\"}`} id=\"card-holder\">\n            <ItemContainer />\n            </div>\n\n            <div className={`${toggleCart ? \"col-md-3\" : \"col-md-3 collapsed\"}`} id=\"cart-container\"> \n            <Cart />\n            </div>\n        </div>\n    </div>\n  );\n};\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}