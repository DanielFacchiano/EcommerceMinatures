{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies();\n\nconst Auth = () => {\n  _s();\n\n  // Initial state when we enter this page has all saved fields as nothing, as changes in inputs are detected\n  // the state is changed to reflect changes\n  const initialState = {\n    fullName: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const [form, setForm] = useState(initialState);\n  const [isSignup, setIsSignup] = useState(true); // Set our form state to the previous form state, but change the detected e.target name field to\n  // its corresponding value that has been changed\n\n  const handleChange = e => {\n    setForm({ ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      fullName,\n      username,\n      password\n    } = form;\n    const URL = \"http://localhost:5000/auth\"; //Backticks let us derefrence variables if isignup is true, post to signup else post to login\n    // we await the axios post to our server route of choice, and store the results in data\n\n    const {\n      data: {\n        token,\n        userId,\n        hashedPassword\n      }\n    } = await axios.post(`${URL}/${isSignup ? \"signup\" : \"login\"}`, {\n      username,\n      password,\n      fullName\n    });\n    cookies.set(\"token\", token);\n    cookies.set(\"username\", username);\n    cookies.set(\"fullname\", fullName);\n    cookies.set(\"userId\", userId);\n\n    if (isSignup) {\n      cookies.set(\"hashedPassword\", hashedPassword);\n    } //reload browser after setting cookies\n\n\n    window.location.reload();\n  };\n\n  const switchMode = () => {\n    setIsSignup(!isSignup);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Auth, \"9CmORNuqS94NFdy+0tkbbtgMh98=\");\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/home/dan/Documents/reactpract/front/src/components/Auth.jsx"],"names":["React","useState","axios","Cookies","cookies","Auth","initialState","fullName","username","password","confirmPassword","form","setForm","isSignup","setIsSignup","handleChange","e","target","name","value","handleSubmit","preventDefault","URL","data","token","userId","hashedPassword","post","set","window","location","reload","switchMode"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AAEA,MAAME,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA;AACA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,QAAQ,EAAE,EADS;AAEnBC,IAAAA,QAAQ,EAAE,EAFS;AAGnBC,IAAAA,QAAQ,EAAE,EAHS;AAInBC,IAAAA,eAAe,EAAE;AAJE,GAArB;AAOA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAACK,YAAD,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC,CAXiB,CAajB;AACA;;AACA,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAC1BJ,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACK,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAArC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAOJ,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAM;AAAEd,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAAmCE,IAAzC;AAEA,UAAMW,GAAG,GAAG,4BAAZ,CAJgC,CAMhC;AACA;;AACA,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiBC,QAAAA;AAAjB;AADF,QAEF,MAAMxB,KAAK,CAACyB,IAAN,CAAY,GAAEL,GAAI,IAAGT,QAAQ,GAAG,QAAH,GAAc,OAAQ,EAAnD,EAAsD;AAC9DL,MAAAA,QAD8D;AAE9DC,MAAAA,QAF8D;AAG9DF,MAAAA;AAH8D,KAAtD,CAFV;AAQAH,IAAAA,OAAO,CAACwB,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AACApB,IAAAA,OAAO,CAACwB,GAAR,CAAY,UAAZ,EAAwBpB,QAAxB;AACAJ,IAAAA,OAAO,CAACwB,GAAR,CAAY,UAAZ,EAAwBrB,QAAxB;AACAH,IAAAA,OAAO,CAACwB,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;;AAEA,QAAIZ,QAAJ,EAAc;AACZT,MAAAA,OAAO,CAACwB,GAAR,CAAY,gBAAZ,EAA8BF,cAA9B;AACD,KAvB+B,CAyBhC;;;AACAG,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GA3BD;;AA6BA,QAAMC,UAAU,GAAG,MAAM;AACvBlB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD,GAFD;;AAIA,sBAAQ,qCAAR;AACD,CArDD;;GAAMR,I;;KAAAA,I;AAuDN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\n\nconst cookies = new Cookies();\n\nconst Auth = () => {\n  // Initial state when we enter this page has all saved fields as nothing, as changes in inputs are detected\n  // the state is changed to reflect changes\n  const initialState = {\n    fullName: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const [form, setForm] = useState(initialState);\n  const [isSignup, setIsSignup] = useState(true);\n\n  // Set our form state to the previous form state, but change the detected e.target name field to\n  // its corresponding value that has been changed\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { fullName, username, password } = form;\n\n    const URL = \"http://localhost:5000/auth\";\n\n    //Backticks let us derefrence variables if isignup is true, post to signup else post to login\n    // we await the axios post to our server route of choice, and store the results in data\n    const {\n      data: { token, userId, hashedPassword },\n    } = await axios.post(`${URL}/${isSignup ? \"signup\" : \"login\"}`, {\n      username,\n      password,\n      fullName,\n    });\n\n    cookies.set(\"token\", token);\n    cookies.set(\"username\", username);\n    cookies.set(\"fullname\", fullName);\n    cookies.set(\"userId\", userId);\n\n    if (isSignup) {\n      cookies.set(\"hashedPassword\", hashedPassword);\n    }\n\n    //reload browser after setting cookies\n    window.location.reload();\n  };\n\n  const switchMode = () => {\n    setIsSignup(!isSignup);\n  };\n\n  return (<></>);\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}