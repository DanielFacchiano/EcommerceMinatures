{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/reactpract/front/src/components/Checkout.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Quick refrence that I used for credit card input formatting at:\n// https://stackoverflow.com/questions/48534229/what-is-the-correct-input-type-for-credit-card-numbers\n// - User\n// on loading checkout, we use the user id in cookies to get the users cart\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCartItem = () => {// function to get the users cart here > return list of users cart information objects\n};\n\nconst Checkout = () => {\n  _s();\n\n  // When we work on Checkout in detail we will retrieve a list of cart items and dynamically\n  // build a list of the items in the cart\n  const [cartList, setCartList] = useState([]);\n  const [cardInformation, setCardInformation] = React.useState(\"\");\n  const [city, setCity] = React.useState(\"\");\n  const [state, setState] = React.useState(\"\");\n  const [street, setStreet] = React.useState(\"\"); //  setCartList(getCartItem);\n\n  const handleCheckout = event => {\n    event.preventDefault();\n    console.log(`Shooting ${cardInformation} and ${city} to the backend through Axios!`);\n    console.log(\"Oh man, that was succesful, totally setting up cookies and redirecting to store\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container \",\n    style: {\n      backgroundColor: \"lightblue\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Checkout: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" *List of items in cart rendered here* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Enter Checkout Information: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Card Information:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"cardInformation\",\n            type: \"tel\",\n            inputmode: \"numeric\",\n            pattern: \"[0-9\\\\s]{13,19}\",\n            autocomplete: \"cc-number\",\n            maxlength: \"19\",\n            placeholder: \"xxxx xxxx xxxx xxxx\",\n            value: cardInformation,\n            onChange: event => setCardInformation(event.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"city\",\n            type: \"city\",\n            value: city,\n            onChange: event => setCity(event.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"State:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"state\",\n            type: \"state\",\n            value: state,\n            onChange: event => setState(event.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Street Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"street\",\n            type: \"street\",\n            value: street,\n            onChange: event => setStreet(event.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"8X1EgmcmXOmxvOzyz7LY3J6JqAo=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/home/dan/Documents/reactpract/front/src/components/Checkout.jsx"],"names":["React","useState","getCartItem","Checkout","cartList","setCartList","cardInformation","setCardInformation","city","setCity","state","setState","street","setStreet","handleCheckout","event","preventDefault","console","log","backgroundColor","textAlign","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\n// Quick refrence that I used for credit card input formatting at:\n// https://stackoverflow.com/questions/48534229/what-is-the-correct-input-type-for-credit-card-numbers\n// - User\n\n// on loading checkout, we use the user id in cookies to get the users cart\nconst getCartItem = () =>\n{\n    // function to get the users cart here > return list of users cart information objects\n}\n\nconst Checkout = () => {\n\n    // When we work on Checkout in detail we will retrieve a list of cart items and dynamically\n    // build a list of the items in the cart\n    const [cartList, setCartList] = useState([]);\n    const [cardInformation, setCardInformation] = React.useState(\"\");\n    const [city, setCity] = React.useState(\"\");\n    const [state, setState] = React.useState(\"\");\n    const [street, setStreet] = React.useState(\"\");\n\n    //  setCartList(getCartItem);\n\n    const handleCheckout = (event) =>\n    {\n      event.preventDefault();\n      console.log(`Shooting ${cardInformation} and ${city} to the backend through Axios!`);\n      console.log(\"Oh man, that was succesful, totally setting up cookies and redirecting to store\")\n\n    }\n\n  return (\n    <div className=\"container \" style={{backgroundColor:\"lightblue\"}}>\n        <div className=\"row\">\n            <div className=\"col\" style={{textAlign:\"center\"}}>\n                <h1>Checkout: </h1>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col\" style={{textAlign:\"center\"}}>\n                <p> *List of items in cart rendered here* </p>            \n            {/* {cartList.map((cartItemInfo)=>( \n                <CartItem cartItemInfo = {cartItemInfo}/>\n                ))}             */}\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col\" style={{textAlign:\"center\"}}>\n                <h1>Enter Checkout Information: </h1>\n                <p>Card Information:\n            <input\n              name=\"cardInformation\"\n              type=\"tel\"\n              inputmode=\"numeric\"\n              pattern=\"[0-9\\s]{13,19}\"\n              autocomplete=\"cc-number\" \n              maxlength=\"19\" \n              placeholder=\"xxxx xxxx xxxx xxxx\"\n              value={cardInformation}\n              onChange={event => setCardInformation(event.target.value)}\n              required />\n              </p>\n              <p>City:\n            <input\n              name=\"city\"\n              type=\"city\"\n              value={city}\n              onChange={event => setCity(event.target.value)}\n              required />\n              </p>\n              <p>State:\n            <input\n              name=\"state\"\n              type=\"state\"\n              value={state}\n              onChange={event => setState(event.target.value)}\n              required />\n              </p>\n              <p>Street Address:\n            <input\n              name=\"street\"\n              type=\"street\"\n              value={street}\n              onChange={event => setStreet(event.target.value)}\n              required />\n              </p>\n            </div>\n        </div>\n    </div>\n  );\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}